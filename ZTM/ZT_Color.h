/*** Copyright (C) 2019-2025 ZaidaTek, Andreas Riebesehl
**** This work is licensed under: Creative Commons Attribution-NoDerivatives 4.0 International Public License
**** For full license text, please visit: https://creativecommons.org/licenses/by-nd/4.0/legalcode
***/
#ifndef ZT_COLOR_H_INCLUDED
#define ZT_COLOR_H_INCLUDED

#include "ZTM.h"
// PRE-DEFINED COLORS
#include "ZT_ColorVGA.h"
//#define ZTM_COLORX11_EXTENDED
#include "ZT_ColorX11.h"
// COLOR PATCHING
#define ZTM_COLOR_NONE 			0x0
#define ZTM_COLOR_TRANSPARENT	ZTM_COLOR_NONE
#define ZTM_COLOR_BLACK			ZTM_COLORVGA_BLACK
#define ZTM_COLOR_BLUE			ZTM_COLORVGA_BLUE
#define ZTM_COLOR_GREEN			ZTM_COLORVGA_GREEN
#define ZTM_COLOR_CYAN			ZTM_COLORVGA_CYAN
#define ZTM_COLOR_RED			ZTM_COLORVGA_RED
#define ZTM_COLOR_MAGENTA		ZTM_COLORVGA_MAGENTA
#define ZTM_COLOR_BROWN			ZTM_COLORVGA_BROWN
#define ZTM_COLOR_LIGHT_GRAY	ZTM_COLORVGA_LIGHT_GRAY
#define ZTM_COLOR_DARK_GRAY		ZTM_COLORVGA_DARK_GRAY
#define ZTM_COLOR_LIGHT_BLUE	ZTM_COLORVGA_LIGHT_BLUE
#define ZTM_COLOR_LIGHT_GREEN	ZTM_COLORVGA_LIGHT_GREEN
#define ZTM_COLOR_LIGHT_CYAN	ZTM_COLORVGA_LIGHT_CYAN
#define ZTM_COLOR_LIGHT_RED		ZTM_COLORVGA_LIGHT_RED
#define ZTM_COLOR_LIGHT_MAGENTA	ZTM_COLORVGA_LIGHT_MAGENTA
#define ZTM_COLOR_YELLOW		ZTM_COLORVGA_YELLOW
#define ZTM_COLOR_WHITE			ZTM_COLORVGA_WHITE
// MARKUP
#define ZTM_COLOR_GRAY			ZTM_COLOR_DARK_GRAY
#define ZTM_COLOR_GREY			ZTM_COLOR_GRAY
#define ZTM_COLOR_LIGHT_GREY	ZTM_COLOR_LIGHT_GRAY
#define ZTM_COLOR_DARK_GREY		ZTM_COLOR_DARK_GRAY
#define ZTM_COLOR_FUCHSIA		ZTM_COLOR_LIGHT_MAGENTA
#define ZTM_COLOR_LIME			ZTM_COLOR_LIGHT_GREEN
#define ZTM_COLOR_AQUA			ZTM_COLOR_LIGHT_CYAN
// PALETTE
#define ZTM_PALETTE_R 			0x1
#define ZTM_PALETTE_G 			0x2
#define ZTM_PALETTE_B 			0x4
#define ZTM_PALETTE_A 			0x8
#define ZTM_PALETTE_UNKNOWN 	0x0
// ABGR
#define ZTM_PALETTE_ABGR 		0x8421
#define ZTM_PALETTE_ABGR_MASKC 	0x00ffffff
#define ZTM_PALETTE_ABGR_MASKA 	0xff000000
#define ZTM_PALETTE_ABGR_MASKR 	0x000000ff
#define ZTM_PALETTE_ABGR_MASKG 	0x0000ff00
#define ZTM_PALETTE_ABGR_MASKB 	0x00ff0000
#define ZTM_PALETTE_ABGR_SHIFTC 0
#define ZTM_PALETTE_ABGR_SHIFTA 24
#define ZTM_PALETTE_ABGR_SHIFTR 0
#define ZTM_PALETTE_ABGR_SHIFTG 8
#define ZTM_PALETTE_ABGR_SHIFTB 16
// ARGB
#define ZTM_PALETTE_0RGB 		0x0124
#define ZTM_PALETTE_ARGB 		0x8124
#define ZTM_PALETTE_ARGB_MASKC 	0x00ffffff
#define ZTM_PALETTE_ARGB_MASKA 	0xff000000
#define ZTM_PALETTE_ARGB_MASKR 	0x00ff0000
#define ZTM_PALETTE_ARGB_MASKG 	0x0000ff00
#define ZTM_PALETTE_ARGB_MASKB 	0x000000ff
#define ZTM_PALETTE_ARGB_SHIFTC 0
#define ZTM_PALETTE_ARGB_SHIFTA 24
#define ZTM_PALETTE_ARGB_SHIFTR 16
#define ZTM_PALETTE_ARGB_SHIFTG 8
#define ZTM_PALETTE_ARGB_SHIFTB 0
// RGBA, DEFAULT
#define ZTM_PALETTE_RGBA 		0x1248
#define ZTM_PALETTE_RGBA_MASKC 	0xffffff00
#define ZTM_PALETTE_RGBA_MASKA 	0x000000ff
#define ZTM_PALETTE_RGBA_MASKR 	0xff000000
#define ZTM_PALETTE_RGBA_MASKG 	0x00ff0000
#define ZTM_PALETTE_RGBA_MASKB 	0x0000ff00
#define ZTM_PALETTE_RGBA_SHIFTC 8
#define ZTM_PALETTE_RGBA_SHIFTA 0
#define ZTM_PALETTE_RGBA_SHIFTR 24
#define ZTM_PALETTE_RGBA_SHIFTG 16
#define ZTM_PALETTE_RGBA_SHIFTB 8

///implement these someday
//#define ZTM_PALETTE_0BGR 0x0421
//#define ZTM_PALETTE_RGB0 0x1240
//#define ZTM_PALETTE_BGRA 0x4218
//#define ZTM_PALETTE_BGR0 0x4210
///and these for flipping color channels
//#define ZTM_PALETTE_ARBG
//#define ZTM_PALETTE_ABRG
//#define ZTM_PALETTE_AGBR
//#define ZTM_PALETTE_AGRB
///etc...

///something, something, endianess
//#define ZTM_PALETTE_BITMAP ZTM_PALETTE_0BGR
//#define ZTM_PALETTE_JPG ZTM_PALETTE_0BGR
#define ZTM_PALETTE_PNG ZTM_PALETTE_ABGR

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus
ZT_BOOL ZTM_ColorPalette(ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorMaskC(ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorMaskA(ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorMaskR(ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorMaskG(ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorMaskB(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorShiftC(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorShiftA(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorShiftR(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorShiftG(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorShiftB(ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorA(ZT_COLOR iColor, ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorR(ZT_COLOR iColor, ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorG(ZT_COLOR iColor, ZT_FLAG iPalette);
ZT_INDEX ZTM_ColorB(ZT_COLOR iColor, ZT_FLAG iPalette);
ZT_COLOR ZTM_ColorConvert(ZT_COLOR iColor, ZT_FLAG iPaletteSource, ZT_FLAG iPaletteTarget);
ZT_COLOR ZTM_ColorComplementary(ZT_COLOR iColor);
ZT_INDEX ZTM_ColorBlend(ZT_INDEX iColor, ZT_INDEX iBase, ZT_INDEX iAlpha);
#ifdef __cplusplus
}
#endif // __cplusplus

#endif // ZT_COLOR_H_INCLUDED
